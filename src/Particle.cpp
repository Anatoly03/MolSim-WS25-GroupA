/*
 * Particle.cpp
 *
 *  Created on: 23.02.2010
 *      Author: eckhardw
 */

#include "Particle.h"

#include <iostream>

#include "math/Vec3.h"
#include "utils/ArrayUtils.h"

Particle::Particle(int type_arg) {
    type = type_arg;
    std::cout << "Particle generated!" << std::endl;
    force = {0., 0., 0.};
    old_force = {0., 0., 0.};
}

Particle::Particle(const Particle &other) {
    position = other.position;
    velocity = other.velocity;
    force = other.force;
    old_force = other.old_force;
    mass = other.mass;
    type = other.type;
    std::cout << "Particle generated by copy!" << std::endl;
}

// Todo: maybe use initializater list instead of copy?
Particle::Particle(Vec3D pos_arg, Vec3D vel_arg, double mass_arg, int type_arg) {
    position = pos_arg;
    velocity = vel_arg;
    mass = mass_arg;
    type = type_arg;
    force = {0., 0., 0.};
    old_force = {0., 0., 0.};
    std::cout << "Particle generated!" << std::endl;
}

Particle::~Particle() { std::cout << "Particle destructed!" << std::endl; }

const Vec3D &Particle::getPosition() const { return position; }

const Vec3D &Particle::getVelocity() const { return velocity; }

const Vec3D &Particle::getForce() const { return force; }

void Particle::setPosition(Vec3D &position_) { this->position = position_; }

void Particle::setVelocity(Vec3D &velocity_) { this->velocity = velocity_; }

void Particle::setForce(Vec3D &force_) { this->force = force_; }

void Particle::delayForce() {
    this->old_force = this->force;
    this->force = Vec3D(0);
}

const Vec3D &Particle::getOldForce() const { return old_force; }

double Particle::getMass() const { return mass; }

int Particle::getType() const { return type; }

std::string Particle::toString() const {
    std::stringstream stream;
    stream << "Particle: Position:" << position.asArray() << " Velocity: " << velocity.asArray()
           << " Force: " << force.asArray() << " Old Force: " << old_force.asArray() << " Type: " << type;
    return stream.str();
}

bool Particle::operator==(Particle &other) {
    return (position == other.position) and (velocity == other.velocity) and (force == other.force) and
           (type == other.type) and (mass == other.mass) and (old_force == other.old_force);
}

std::ostream &operator<<(std::ostream &stream, Particle &p) {
    stream << p.toString();
    return stream;
}
