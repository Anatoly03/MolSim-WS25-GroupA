/*
 * Particle.cpp
 *
 *  Created on: 23.02.2010
 *      Author: eckhardw
 */

#include "Particle.h"
#include "spdlog/spdlog.h"

#include <iostream>

#include "math/Vec3.h"
#include "utils/ArrayUtils.h"

/**
 * The default constructor for Particle logs the creation
 * of an initially forceless particle.
 */
Particle::Particle(int type_arg) {
    type = type_arg;
    spdlog::info("Particle generated!");
    force = {0., 0., 0.};
    old_force = {0., 0., 0.};
}

/**
 * The copy constructor for Particle deeply calls the
 * copy constructor of Vec3 for all attributes.
 */
Particle::Particle(const Particle &other) {
    position = other.position;
    velocity = other.velocity;
    force = other.force;
    old_force = other.old_force;
    mass = other.mass;
    type = other.type;

    spdlog::info("Particle generated by copy!");
}

/**
 * The component-wise constructor for Particle creates a
 * new particle from atomic attributes.
 */
Particle::Particle(Vec3D pos_arg, Vec3D vel_arg, double mass_arg, int type_arg) {
    position = pos_arg;
    velocity = vel_arg;
    mass = mass_arg;
    type = type_arg;
    force = {0., 0., 0.};
    old_force = {0., 0., 0.};

    spdlog::info("Particle generated!");
}

/**
 * Particle destructor.
 */
Particle::~Particle() {
    // TODO resolve segfault
    // spdlog::info("Particle destructed!");
}

/**
 * @brief Get the position of this Particle.
 */
const Vec3D &Particle::getPosition() const { return position; }

/**
 * @brief Get the velocity of this Particle.
 */
const Vec3D &Particle::getVelocity() const { return velocity; }

/**
 * @brief Get the force effective on this Particle.
 */
const Vec3D &Particle::getForce() const { return force; }

/**
 * @brief Set the position of this Particle.
 */
void Particle::setPosition(const Vec3D &position_) { this->position = position_; }

/**
 * @brief Set the velocity of this Particle.
 */
void Particle::setVelocity(const Vec3D &velocity_) { this->velocity = velocity_; }

/**
 * @brief Set the force effective on this Particle.
 */
void Particle::setForce(const Vec3D &force_) { this->force = force_; }

/**
 * Move force to old force and reset current force to zero. This
 * delays force value by one tick.
 */
void Particle::delayForce() {
    this->old_force = this->force;
    this->force = Vec3D(0);
}

/**
 * @brief Get the delayed force effective on this Particle
 * in the previous tick.
 */
const Vec3D &Particle::getOldForce() const { return old_force; }

/**
 * @brief Get the mass of this Particle.
 */
double Particle::getMass() const { return mass; }

/**
 * @deprecated
 */
int Particle::getType() const { return type; }

/**
 * @brief Convert Particle to a string representation.
 */
std::string Particle::toString() const {
    std::stringstream stream;
    stream << "Particle: Position:" << position.asArray() << " Velocity: " << velocity.asArray()
           << " Force: " << force.asArray() << " Old Force: " << old_force.asArray() << " Type: " << type;
    return stream.str();
}

/**
 * @brief Stream operator overload for Particle.
 */
std::ostream &operator<<(std::ostream &stream, Particle &p) {
    stream << p.toString();
    return stream;
}
